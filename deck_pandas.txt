	###Question: Just looking at the first 10 time zones we see that some of them are unknown (empty). You can filter these out also but I’ll leave them in for now. Now, to produce counts by time zone I’ll show two approaches: the harder way (using just the Python standard library) and the easier way (using pandas). One way to do the counting is to use a dict to store counts while we iterate through the time zones. Write function get_counts2 which takes sequence and returns a dictionary counts which takes items in the sequence as keys and number of time unique items appear as values. variables sequence, counts, x

Answer: def get_counts2(sequence):
	counts = defaultdict(int)
	for x in sequence:
		counts[x] += 1
	return counts


Note:

	###Question: write a function top_counts returning top ten time zones from a count_dict structured as follows: {tz: count}. variables include value_key_pairs, n, tz.  top_counts(count_dict) should return
In [35]: top_counts(count_dict) 
Out[35]: [(33, u'America/Sao_Paulo'), (35, u'Europe/Madrid'), (36, u'Pacific/Honolulu'), (37, u'Asia/Tokyo'), (74, u'Europe/London'), (191, u'America/Denver'), (382, u'America/Los_Angeles'), (400, u'America/Chicago'), (521, u''), (1251, u'America/New_York')]

	Answer: def top_counts(count_dict, n=10):
	value_key_pairs = [(count, tz) for tz, count in count_dict.items()]
	value_key_pairs.sort()
	return value_key_pairs[-n:]

Note:

	###Question: get the top 10 most common time zones from a sequence time_zones using Counter

Answer:from collections import Counter
counts = Counter(time_zones)
counts.most_common(10)

Note: Out[2]:
[(u'America/New_York', 1251),
(u'', 521), (u'America/Chicago', 400), (u'America/Los_Angeles', 382), (u'America/Denver', 191), (u'Europe/London', 74), (u'Asia/Tokyo', 37), (u'Pacific/Honolulu', 36), (u'Europe/Madrid', 35), (u'America/Sao_Paulo', 33)]

###Question: create a data frame df from the cmudict

Answer:import pandas as pd
df = pd.DataFrame.from_dict(cmu, 'index')

Note:

###Question: create a dataframe called cmudf from cmu with columns Word and Arp

Answer:import pandas as pd
cmudf = pd.DataFrame(list(cmu.items()), columns=['Word', 'Arp'])

Note:

###Question: create a dataframe called cmudf from cmu with columns Word and Arp and then create a series arp_counts which has the count of each Arp string

Answer:import pandas as pd
cmudf = pd.DataFrame(list(cmu.items()), columns=['Word', 'Arp'])
arp_counts = cmudf.Arp.value_counts()

Note:

###Question: create a series cmuSeries from cmudict

Answer:import pandas as pd
cmuSeries = pd.Series(cmu)

Note:

###Question: get number of countries in df which have only received one gold in the summer 'Gold.1' or one gold in teh winder 'Gold'

Answer:len(df[(df['Gold'] > 0) | (df['Gold.1'] > 0)])

Note:

###Question: Write a query to return all teh names ofpeople who bought products worth more than 3.00
purchase_1 = pd.Series({'Name': 'Chris',
                        'Item Purchased': 'Dog Food',
                        'Cost': 22.50})
purchase_2 = pd.Series({'Name': 'Kevyn',
                        'Item Purchased': 'Kitty Litter',
                        'Cost': 2.50})
purchase_3 = pd.Series({'Name': 'Vinod',
                        'Item Purchased': 'Bird Seed',
                        'Cost': 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 1', 'Store 2'])

Answer:df['Name'][df['Cost']>3]

Note:

###Question: create series cmuA wich includes the Words whose Arp string starts with A
cmudf = pd.DataFrame(list(cmu.items()), columns=['Word', 'Arp'])

Answer:cmuA = cmudf['Word'][cmudf['Arp'].str.startswith('A') == True]

Note:

###Question: create cmudf from cmu and using reset index

Answer:cmudf = pd.DataFrame.from_dict(cmu, 'index')
cmudf.reset_index()

Note:returns this
	index		0
0	CURTRIGHT	K ER1 T R AY2 T
1	GERBRANDT	G ER1 B R AE2 N T
2	RESEARCHED	R IY0 S ER1 CH T

###Question: create cmudf and return array of unique Arp strings

Answer: cmudf = pd.DataFrame(list(cmu.items()), columns=['Word', 'Arp'])
cmudf['Arp'].unique()

Note:

###Question: Reindex teh purchase records DataFrame to be indexed hierarchically, first by store then by person. Name these indexes 'Location' and 'Name'. Then add a new entry to it witht he value of:

Naem:'Kevyn', Item Purchased: 'Kitty Food', Cost: 3.00, Location:'Store 2'

purchase_1 = pd.Series({'Name': 'Chris',
                        'Item Purchased': 'Dog Food',
                        'Cost': 22.50})
purchase_2 = pd.Series({'Name': 'Kevyn',
                        'Item Purchased': 'Kitty Litter',
                        'Cost': 2.50})
purchase_3 = pd.Series({'Name': 'Vinod',
                        'Item Purchased': 'Bird Seed',
                        'Cost': 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 1', 'Store 2'])

Answer:df = df.set_index([df.index, 'Name'])
df.index.names = ['Location', 'Name']
df = df.append(pd.Series(data={'Cost': 3.00, 'Item Purchased': 'Kitty Food'}, name=('Store 2', 'Kevyn')))

Note:

###Question: create df from log.csv; 
change the default index to 'time' and then sort by time
then index by both time and user
then fill the missing data using the previous value


Answer:df = pd.read_csv('log.csv')
df = df.set_index('time')
df = df.sort_index()
df = df.reset_index()
df = df.set_index(['time', 'user'])
df = df.fillna(method='ffill')

Note:

###Question: To find the most popular name or the baby name with the higest birth rate, we can do one of the following
- Sort the dataframe by 'Births' and select the top row [2 lines]
- Use the max() attribute to find the maximum value [one line]

Answer:Sorted = df.sort_values(['Births'], ascending=False)
Sorted.head(1)
df['Births'].max()

Note:

###Question: df['Names'] - This is the entire list of baby names, the entire Names column
df['Births'] - This is the entire list of Births in the year 1880, the entire Births column
df['Births'].max() - This is the maximum value found in the Births column
Q: [Find all of the records in the Births column where it is equal to max value of 973]


Answer: [df['Births'] == df['Births'].max()] 

Note: An alternative way could have been to use the Sorted dataframe:
Sorted['Names'].head(1).value

###Question: df['Names'] - This is the entire list of baby names, the entire Names column
df['Births'] - This is the entire list of Births in the year 1880, the entire Births column
df['Births'].max() - This is the maximum value found in the Births column
Q: [Find all of the records in the Births column where it is equal to max using sorting] 

Answer: Sorted = df.sort_values(['Births'], ascending=False)
Sorted['Names'].head(1).value

Note:

###Question: Which country has won the most gold medals in summer games? df.head() ...
			# Summer	Gold	Silver	Bronze	Total	# Winter	Gold.1	Silver.1	Bronze.1	Total.1	# Games	Gold.2	Silver.2	Bronze.2	Combined total	ID
Afghanistan	13	0	0	2	2	0	0	0	0	0	13	0	0	2	2	AFG
Algeria	12	5	2	8	15	3	0	0	0	0	15	5	2	8	15	ALG
Argentina	23	18	24	28	70	18	0	0	0	0	41	18	24	28	70	ARG
Armenia	5	1	2	9	12	6	0	0	0	0	11	1	2	9	12	ARM
Australasia	2	3	4	5	12	0	0	0	0	0	2	3	4	5	12	ANZ

Answer:df.index[df['Gold'] == df['Gold'].max()].values[0]

Note:

###Question: make graphs prettier

Answer:import pandas as pd
pd.set_option('display.mpl_style', 'default')
figsize(15, 5)

Note:

###Question: upload csv file bikes.csv to fixed_df
change the column separator to a ;
Set the encoding to 'latin1' (the default is 'utf8')
Parse the dates in the 'Date' column
Tell it that our dates have the date first instead of the month first
Set the index to be the 'Date' column

previous df looked like this:

Date;Berri 1;Br�beuf (donn�es non disponibles);C�te-Sainte-Catherine;Maisonneuve 1;Maisonneuve 2;du Parc;Pierre-Dupuy;Rachel1;St-Urbain (donn�es non disponibles)
0	01/01/2012;35;;0;38;51;26;10;16;
1	02/01/2012;83;;1;68;153;53;6;43;
2	03/01/2012;135;;2;104;248;89;3;58;


Answer:fixed_df = pd.read_csv('bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date')


Note:

###Question: What if we just want to know the complaint type and the borough, but not the rest of the information in complaints? 

Answer: complaints[['Complaint Type', 'Borough']]

Note:

###Question: Get the top 10 most common Complaint Type in complaints dataframe and plot as a bargraph

Answer:complaint_counts = complaints['Complaint Type'].value_counts()
complaint_counts[:10].plot(kind='bar')

Note:

###Question: To get the noise_complaints, find the rows where the "Complaint Type" column is "Noise - Street/Sidewalk".

Answer:noise_complaints = complaints[complaints['Complaint Type'] == "Noise - Street/Sidewalk"]

Note:

###Question: get the first five complaints that ar noise complints ("Noise - Street/Sidewalk") and in Borough Brooklyn. vars are is_noise and in_brooklyn. then display 10 items showing only columns Complaint Type, borough, Created Date, and Descriptor

Answer:is_noise = complaints['Complaint Type'] == "Noise - Street/Sidewalk"
in_brooklyn = complaints['Borough'] == "BROOKLYN"
complaints[is_noise & in_brooklyn][:5]
complaints[is_noise & in_brooklyn][['Complaint Type', 'Borough', 'Created Date', 'Descriptor']][:10]

Note:

###Question: get the first five complaints that ar noise complints ("Noise - Street/Sidewalk") and in Borough Brooklyn. vars are is_noise and in_brooklyn. then display 10 items showing only columns Complaint Type, borough, Created Date, and Descriptor

Answer:is_noise = complaints['Complaint Type'] == "Noise - Street/Sidewalk"
in_brooklyn = complaints['Borough'] == "BROOKLYN"
complaints[is_noise & in_brooklyn][:5]
complaints[is_noise & in_brooklyn][['Complaint Type', 'Borough', 'Created Date', 'Descriptor']][:10]

Note:

###Question: So, which borough has the most noise complaints? vars are is_noise and noise_complaints
	Complaint Type			Borough		Created Date			Descriptor
31	Noise - Street/Sidewalk	BROOKLYN	10/31/2013 12:30:36 AM	Loud Music/Party
49	Noise - Street/Sidewalk	BROOKLYN	10/31/2013 12:05:10 AM	Loud Talking
109	Noise - Street/Sidewalk	BROOKLYN	10/30/2013 11:26:32 PM	Loud Music/Party
236	Noise - Street/Sidewalk	BROOKLYN	10/30/2013 10:02:58 PM	Loud Talking
370	Noise - Street/Sidewalk	BROOKLYN	10/30/2013 08:38:25 PM	Loud Music/Party
378	Noise - Street/Sidewalk	BROOKLYN	10/30/2013 08:32:13 PM	Loud Talking
656	Noise - Street/Sidewalk	BROOKLYN	10/30/2013 06:07:39 PM	Loud Music/Party


Answer: is_noise = complaints['Complaint Type'] == "Noise - Street/Sidewalk"
noise_complaints = complaints[is_noise]
noise_complaints['Borough'].value_counts()

Note:

###Question: divide by total number of complaints and plot as bar graph
is_noise = complaints['Complaint Type'] == "Noise - Street/Sidewalk"
noise_complaints = complaints[is_noise]
noise_complaints['Borough'].value_counts()
Out[14]:
MANHATTAN        917
BROOKLYN         456
BRONX            292
QUEENS           226
STATEN ISLAND     36
Unspecified        1
dtype: int64

Answer:noise_complaint_counts = noise_complaints['Borough'].value_counts()
complaint_counts = complaints['Borough'].value_counts()
(noise_complaint_counts / complaint_counts.astype(float)).plot(kind='bar')

Note:

###Question: get ufo data from 'url'

Answer: ufo = pd.read_table('url')

Note:

###Question: create a new column called Location in df which combines the City and State separated by ','

Answer:df['Location'] = df.City + ', ' + df.State

Note:

###Question: rename the df columns named 'Colors Reported', 'Shape Reported' to Colors_Reported and Shape_Reported. Then show index of columns in the dataframe

Answer:df.rename(columns = {'Colors Reported': 'Colors_Reported' 'Shape Reported': 'Shape_Reported'}, inplace=True)
df.columns

Note:

###Question: rename all columns in df at once to city, colors reported, shape reported, state and time

Answer:df_cols = ['city', 'colors reported', 'shape reported', 'state', 'time']
df.columns = df_cols

Note:

###Question: df = pd.read_csv('http://bit.ly/uforeports')
change this so that columns are renamed to strings in the list df_cols when reading in

Answer: df = pd.read_csv('http://bit.ly/uforeports', names=df_cols, header=0)

Note:

###Question: replace spaces with underscores in the column names of df

Answer:df.columns = df.columns.str.replace(' ', '_')

Note:

###Question: data at http://bit.ly/imdbratings
sort by movie title

Answer:df = pd.read_csv('http://bit.ly/imdbratings')
df.title.sort_values()

Note:

###Question: data at http://bit.ly/imdbratings
sort by movie title and showing the whole dataframe

Answer:df = pd.read_csv('http://bit.ly/imdbratings')
df.sort_values('title')

Note:

###Question: movies = read_csv('http://bit.ly/imdbratings')
show all columns but only rows in which that row has a duration of at least 200

Answer:movies[movies.duration >= 200]

Note: series_name COMPARISON returns a series of true/falses... long way:
is_long = movies.duration >= 200
movies[is_long]

###Question: movies = pd.read_csv('http://bit.ly/imdbratings')
show genre column for rows in which that row has a duration of at least 200

Answer:movies.loc[movies.duration >= 200, 'genre']

Note:

###Question: movies = pd.read_csv('http://bit.ly/imdbratings')
return movies with duration of at least 200 and genre is Drama

Answer:movies[(movies.duration >= 200) & (movies.genre == 'Drama')]

Note:

###Question: movies = pd.read_csv('http://bit.ly/imdbratings')
return movies that are Crime or Drama or Action

Answer: movies[movies.genre.isin(['Crime', 'Drama', 'Action'])]

Note: long way is movies[(movies.genre == 'Crime') | (movies.genre == 'Drama') | (movies.genre == 'Action')]

###Question: 

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']


Answer:

Note:

###Question: Create a DataFrame df from this dictionary data which has the index labels.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

Answer: df = pd.DataFrame(data, index=labels)

Note: 
age	animal	priority	visits
a	2.5	cat	yes	1
b	3.0	cat	yes	3
c	0.5	snake	no	2
d	NaN	dog	yes	3
e	5.0	dog	no	2
f	2.0	cat	no	3
g	4.5	snake	no	1
h	NaN	cat	yes	1
i	7.0	dog	no	2
j	3.0	dog	no	1

###Question: Display a summary of the basic information about this DataFrame and its data.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.info()

Note:
...or...

df.describe()

###Question: Return the first 3 rows of the DataFrame df.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.iloc[:3]

Note:
# or equivalently

df.head(3)

###Question: Select just the 'animal' and 'age' columns from the DataFrame df.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.loc[:, ['animal', 'age']]

Note:# or

df[['animal', 'age']]


###Question: Select the data in rows [3, 4, 8] and in columns ['animal', 'age'].

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.ix[[3, 4, 8], ['animal', 'age']]

Note:

animal	age
d	dog	NaN
e	dog	5.0
i	dog	7.0

###Question:Select only the rows where the number of visits is greater than 3. 

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df[df['visits'] > 3]

Note:


###Question: 10. Select the rows where the age is missing, i.e. is NaN.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)


Answer:df[df['age'].isnull()]

Note:

###Question: 11. Select the rows where the animal is a cat and the age is less than 3.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df[(df['animal'] == 'cat') & (df['age'] < 3)]

Note:

###Question: 12. Select the rows the age is between 2 and 4 (inclusive).

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df[df['age'].between(2, 4)]

Note:

###Question:  13. Change the age in row 'f' to 1.5.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)


Answer:df.loc['f', 'age'] = 1.5

Note:

###Question: 14. Calculate the sum of all visits (the total number of visits).

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)


Answer:df['visits'].sum()

Note:

###Question: 15. Calculate the mean age for each different animal in df.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)


Answer:df.groupby('animal')['age'].mean()

Note:

###Question: 16. Append a new row 'k' to df with your choice of values (5.5, 'dog', 'no', 2) for each column. Then delete that row to return the original DataFrame.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.loc['k'] = [5.5, 'dog', 'no', 2]
df = df.drop('k')

Note:

###Question: 17. Count the number of each type of animal in df.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer: df['animal'].value_counts()

Note:

###Question:18. Sort df first by the values in the 'age' in decending order, then by the value in the 'visit' column in ascending order.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.sort_values(by=['age', 'visits'], ascending=[False, True])

Note:

###Question: 19. The 'priority' column contains the values 'yes' and 'no'. Replace this column with a column of boolean values: 'yes' should be True and 'no' should be False.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df['priority'] = df['priority'].map({'yes': True, 'no': False})

Note:

###Question: 20. In the 'animal' column, change the 'snake' entries to 'python'.

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer: df['animal'] = df['animal'].replace('snake', 'python')

Note:

###Question: 21. For each animal type and each number of visits, find the mean age. In other words, each row is an animal, each column is a number of visits and the values are the mean ages (hint: use a pivot table).

data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(data, index=labels)

Answer:df.pivot_table(index='animal', columns='visits', values='age', aggfunc='mean')

Note:

###Question: drop by column number instead of by column label, try this to delete, e.g. the 1st, 2nd and 4th columns:

Answer: df.drop(df.columns[[0, 1, 3]], axis=1)

Note:

###Question: load dataframe energy from file 'indicators.xls' excluding header rows 1-7 and the last 38 rows. Then drop the first two columns

Answer:with open('indicators.xls', 'rb') as f:
    energy = pd.read_excel(f, skiprows=7, skip_footer=38)
energy = energy.drop(energy.columns[[0, 1]], axis=1)

Note:

###Question: drop the first 16 rows from dataframe energy 

Answer: energy = energy.drop(energy.index[:16])

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

###Question: 

Answer:

Note:

