###Question:method: Scan through string looking for the first location where this regular  expression produces a match, and return a corresponding match object.  Return None if no position in the string matches the  pattern; note that this is different from finding a zero-length match at some  point in the string.  The optional second parameter pos gives an index in the string where the  search is to start; it defaults to 0.  This is not completely equivalent to  slicing the string; the '^' pattern character matches at the real beginning  of the string and at positions just after a newline, but not necessarily at the  index where the search is to start.  The optional parameter endpos limits how far the string will be searched; it  will be as if the string is endpos characters long, so only the characters  from pos to endpos - 1 will be searched for a match.  If endpos is less  than pos, no match will be found; otherwise, if rx is a compiled regular  expression object, rx.search(string, 0, 50) is equivalent to  rx.search(string[:50], 0).  >>> pattern = re.compile("d")  >>> pattern.search("dog")     # Match at index 0  <_sre.SRE_Match object; span=(0, 1), match='d'>  >>> pattern.search("dog", 1)  # No match; search doesn't include the "d"

Answer:regex.search(string[, pos[, endpos]])

Note:

###Question:method: If zero or more characters at the beginning of string match this regular  expression, return a corresponding match object.  Return None if the string does not match the pattern; note that this is  different from a zero-length match.  The optional pos and endpos parameters have the same meaning as for the  search() method.  >>> pattern = re.compile("o")  >>> pattern.match("dog")      # No match as "o" is not at the start of "dog".  >>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".  <_sre.SRE_Match object; span=(1, 2), match='o'>      If you want to locate a match anywhere in string, use  search() instead (see also search() vs. match()).

Answer:regex.match(string[, pos[, endpos]])

Note:

###Question:method: If the whole string matches this regular expression, return a corresponding  match object.  Return None if the string does not  match the pattern; note that this is different from a zero-length match.  The optional pos and endpos parameters have the same meaning as for the  search() method.  >>> pattern = re.compile("o[gh]")  >>> pattern.fullmatch("dog")      # No match as "o" is not at the start of "dog".  >>> pattern.fullmatch("ogre")     # No match as not the full string matches.  >>> pattern.fullmatch("doggie", 1, 3)   # Matches within given limits.  <_sre.SRE_Match object; span=(1, 3), match='og'>        New in version 3.4.

Answer:regex.fullmatch(string[, pos[, endpos]])

Note:

###Question:method: Identical to the split() function, using the compiled pattern.

Answer:regex.split(string, maxsplit=0)

Note:

###Question:method: Similar to the findall() function, using the compiled pattern, but  also accepts optional pos and endpos parameters that limit the search  region like for match().

Answer:regex.findall(string[, pos[, endpos]])

Note:

###Question:method: Similar to the finditer() function, using the compiled pattern, but  also accepts optional pos and endpos parameters that limit the search  region like for match().

Answer:regex.finditer(string[, pos[, endpos]])

Note:

###Question:method: Identical to the sub() function, using the compiled pattern.

Answer:regex.sub(repl, string, count=0)

Note:

###Question:method: Identical to the subn() function, using the compiled pattern.

Answer:regex.subn(repl, string, count=0)

Note:

###Question:method: Return the string obtained by doing backslash substitution on the template  string template, as done by the sub() method.  Escapes such as \n are converted to the appropriate characters,  and numeric backreferences (\1, \2) and named backreferences  (\g<1>, \g<name>) are replaced by the contents of the  corresponding group.    Changed in version 3.5: Unmatched groups are replaced with an empty string.

Answer:match.expand(template)

Note:

###Question:method: Returns one or more subgroups of the match.  If there is a single argument, the  result is a single string; if there are multiple arguments, the result is a  tuple with one item per argument. Without arguments, group1 defaults to zero  (the whole match is returned). If a groupN argument is zero, the corresponding  return value is the entire matching string; if it is in the inclusive range  [1..99], it is the string matching the corresponding parenthesized group.  If a  group number is negative or larger than the number of groups defined in the  pattern, an IndexError exception is raised. If a group is contained in a  part of the pattern that did not match, the corresponding result is None.  If a group is contained in a part of the pattern that matched multiple times,  the last match is returned.  >>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")  >>> m.group(0)       # The entire match  'Isaac Newton'  >>> m.group(1)       # The first parenthesized subgroup.  'Isaac'  >>> m.group(2)       # The second parenthesized subgroup.  'Newton'  >>> m.group(1, 2)    # Multiple arguments give us a tuple.  ('Isaac', 'Newton')      If the regular expression uses the (?P<name>...) syntax, the groupN  arguments may also be strings identifying groups by their group name.  If a  string argument is not used as a group name in the pattern, an IndexError  exception is raised.  A moderately complicated example:  >>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")  >>> m.group('first_name')  'Malcolm'  >>> m.group('last_name')  'Reynolds'      Named groups can also be referred to by their index:  >>> m.group(1)  'Malcolm'  >>> m.group(2)  'Reynolds'      If a group matches multiple times, only the last match is accessible:  >>> m = re.match(r"(..)+", "a1b2c3")  # Matches 3 times.  >>> m.group(1)                        # Returns only the last match.  'c3'

Answer:match.group([group1, ...])

Note:

###Question:method: Return a tuple containing all the subgroups of the match, from 1 up to however  many groups are in the pattern.  The default argument is used for groups that  did not participate in the match; it defaults to None.  For example:  >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")  >>> m.groups()  ('24', '1632')      If we make the decimal place and everything after it optional, not all groups  might participate in the match.  These groups will default to None unless  the default argument is given:  >>> m = re.match(r"(\d+)\.?(\d+)?", "24")  >>> m.groups()      # Second group defaults to None.  ('24', None)  >>> m.groups('0')   # Now, the second group defaults to '0'.  ('24', '0')

Answer:match.groups(default=None)

Note:

###Question:method: Return a dictionary containing all the named subgroups of the match, keyed by  the subgroup name.  The default argument is used for groups that did not  participate in the match; it defaults to None.  For example:  >>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")  >>> m.groupdict()  {'first_name': 'Malcolm', 'last_name': 'Reynolds'}

Answer:match.groupdict(default=None)

Note:

###Question:method: match.end([group])¶  Return the indices of the start and end of the substring matched by group;  group defaults to zero (meaning the whole matched substring). Return -1 if  group exists but did not contribute to the match.  For a match object m, and  a group g that did contribute to the match, the substring matched by group g  (equivalent to m.group(g)) is  m.string[m.start(g):m.end(g)]      Note that m.start(group) will equal m.end(group) if group matched a  null string.  For example, after m = re.search('b(c?)', 'cba'),  m.start(0) is 1, m.end(0) is 2, m.start(1) and m.end(1) are both  2, and m.start(2) raises an IndexError exception.  An example that will remove remove_this from email addresses:  >>> email = "tony@tiremove_thisger.net"  >>> m = re.search("remove_this", email)  >>> email[:m.start()] + email[m.end():]  'tony@tiger.net'

Answer:match.start([group])

Note:

###Question:method: For a match m, return the 2-tuple (m.start(group), m.end(group)). Note  that if group did not contribute to the match, this is (-1, -1).  group defaults to zero, the entire match.

Answer:match.span([group])

Note:

###Question:Compile a regular expression pattern into a regular expression object, which  can be used for matching using its match() and  search() methods, described below.  The expression’s behaviour can be modified by specifying a flags value.  Values can be any of the following variables, combined using bitwise OR (the  | operator).  The sequence  prog = re.compile(pattern)  result = prog.match(string)      is equivalent to  result = re.match(pattern, string)      but using re.compile() and saving the resulting regular expression  object for reuse is more efficient when the expression will be used several  times in a single program.    Note  The compiled versions of the most recent patterns passed to  re.compile() and the module-level matching functions are cached, so  programs that use only a few regular expressions at a time needn’t worry  about compiling regular expressions.

Answer:re.compile(pattern, flags=0)

Note:

###Question:Scan through string looking for the first location where the regular expression  pattern produces a match, and return a corresponding match object.  Return None if no position in the string matches the  pattern; note that this is different from finding a zero-length match at some  point in the string.

Answer:re.search(pattern, string, flags=0)

Note:

###Question:If zero or more characters at the beginning of string match the regular  expression pattern, return a corresponding match object.  Return None if the string does not match the pattern;  note that this is different from a zero-length match.  Note that even in MULTILINE mode, re.match() will only match  at the beginning of the string and not at the beginning of each line.  If you want to locate a match anywhere in string, use search()  instead (see also search() vs. match()).

Answer:re.match(pattern, string, flags=0)

Note:

###Question:If the whole string matches the regular expression pattern, return a  corresponding match object.  Return None if the  string does not match the pattern; note that this is different from a  zero-length match.    New in version 3.4.

Answer:re.fullmatch(pattern, string, flags=0)

Note:

###Question:Split string by the occurrences of pattern.  If capturing parentheses are  used in pattern, then the text of all groups in the pattern are also returned  as part of the resulting list. If maxsplit is nonzero, at most maxsplit  splits occur, and the remainder of the string is returned as the final element  of the list.  >>> re.split('\W+', 'Words, words, words.')  ['Words', 'words', 'words', '']  >>> re.split('(\W+)', 'Words, words, words.')  ['Words', ', ', 'words', ', ', 'words', '.', '']  >>> re.split('\W+', 'Words, words, words.', 1)  ['Words', 'words, words.']  >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)  ['0', '3', '9']      If there are capturing groups in the separator and it matches at the start of  the string, the result will start with an empty string.  The same holds for  the end of the string:  >>> re.split('(\W+)', '...words, words...')  ['', '...', 'words', ', ', 'words', '...', '']      That way, separator components are always found at the same relative  indices within the result list.    Note  split() doesn’t currently split a string on an empty pattern match.  For example:  >>> re.split('x*', 'axbc')  ['a', 'bc']      Even though 'x*' also matches 0 ‘x’ before ‘a’, between ‘b’ and ‘c’,  and after ‘c’, currently these matches are ignored.  The correct behavior  (i.e. splitting on empty matches too and returning ['', 'a', 'b', 'c',  '']) will be implemented in future versions of Python, but since this  is a backward incompatible change, a FutureWarning will be raised  in the meanwhile.  Patterns that can only match empty strings currently never split the  string.  Since this doesn’t match the expected behavior, a  ValueError will be raised starting from Python 3.5:  >>> re.split("^$", "foo\n\nbar\n", flags=re.M)  Traceback (most recent call last):    File "<stdin>", line 1, in <module>    ...  ValueError: split() requires a non-empty pattern match.          Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Splitting on a pattern that could match an empty string now raises  a warning.  Patterns that can only match empty strings are now rejected.

Answer:re.split(pattern, string, maxsplit=0, flags=0)

Note:

###Question:Return all non-overlapping matches of pattern in string, as a list of  strings.  The string is scanned left-to-right, and matches are returned in  the order found.  If one or more groups are present in the pattern, return a  list of groups; this will be a list of tuples if the pattern has more than  one group.  Empty matches are included in the result unless they touch the  beginning of another match.

Answer:re.findall(pattern, string, flags=0)

Note:

###Question:Return an iterator yielding match objects over  all non-overlapping matches for the RE pattern in string.  The string  is scanned left-to-right, and matches are returned in the order found.  Empty  matches are included in the result unless they touch the beginning of another  match.

Answer:re.finditer(pattern, string, flags=0)

Note:

###Question:Return the string obtained by replacing the leftmost non-overlapping occurrences  of pattern in string by the replacement repl.  If the pattern isn’t found,  string is returned unchanged.  repl can be a string or a function; if it is  a string, any backslash escapes in it are processed.  That is, \n is  converted to a single newline character, \r is converted to a carriage return, and  so forth.  Unknown escapes such as \& are left alone.  Backreferences, such  as \6, are replaced with the substring matched by group 6 in the pattern.  For example:  >>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',  ...        r'static PyObject*\npy_\1(void)\n{',  ...        'def myfunc():')  'static PyObject*\npy_myfunc(void)\n{'      If repl is a function, it is called for every non-overlapping occurrence of  pattern.  The function takes a single match object argument, and returns the  replacement string.  For example:  >>> def dashrepl(matchobj):  ...     if matchobj.group(0) == '-': return ' '  ...     else: return '-'  >>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')  'pro--gram files'  >>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)  'Baked Beans & Spam'      The pattern may be a string or an RE object.  The optional argument count is the maximum number of pattern occurrences to be  replaced; count must be a non-negative integer.  If omitted or zero, all  occurrences will be replaced. Empty matches for the pattern are replaced only  when not adjacent to a previous match, so sub('x*', '-', 'abc') returns  '-a-b-c-'.  In string-type repl arguments, in addition to the character escapes and  backreferences described above,  \g<name> will use the substring matched by the group named name, as  defined by the (?P<name>...) syntax. \g<number> uses the corresponding  group number; \g<2> is therefore equivalent to \2, but isn’t ambiguous  in a replacement such as \g<2>0.  \20 would be interpreted as a  reference to group 20, not a reference to group 2 followed by the literal  character '0'.  The backreference \g<0> substitutes in the entire  substring matched by the RE.    Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Unmatched groups are replaced with an empty string.      Deprecated since version 3.5, will be removed in version 3.6: Unknown escapes consist of '\' and ASCII letter now raise a  deprecation warning and will be forbidden in Python 3.6.

Answer:re.sub(pattern, repl, string, count=0, flags=0)

Note:

###Question:Perform the same operation as sub(), but return a tuple (new_string,  number_of_subs_made).    Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Unmatched groups are replaced with an empty string.

Answer:re.subn(pattern, repl, string, count=0, flags=0)

Note:

###Question:Escape all the characters in pattern except ASCII letters, numbers and '_'.  This is useful if you want to match an arbitrary literal string that may  have regular expression metacharacters in it.    Changed in version 3.3: The '_' character is no longer escaped.

Answer:re.escape(string)

Note:

###Question:Clear the regular expression cache.

Answer:re.purge()

Note:

###Question:Compile a regular expression pattern into a regular expression object, which  can be used for matching using its match() and  search() methods, described below.  The expression’s behaviour can be modified by specifying a flags value.  Values can be any of the following variables, combined using bitwise OR (the  | operator).  The sequence  prog = re.compile(pattern)  result = prog.match(string)      is equivalent to  result = re.match(pattern, string)      but using re.compile() and saving the resulting regular expression  object for reuse is more efficient when the expression will be used several  times in a single program.    Note  The compiled versions of the most recent patterns passed to  re.compile() and the module-level matching functions are cached, so  programs that use only a few regular expressions at a time needn’t worry  about compiling regular expressions.

Answer:re.compile(pattern, flags=0)

Note:

###Question:Scan through string looking for the first location where the regular expression  pattern produces a match, and return a corresponding match object.  Return None if no position in the string matches the  pattern; note that this is different from finding a zero-length match at some  point in the string.

Answer:re.search(pattern, string, flags=0)

Note:

###Question:If zero or more characters at the beginning of string match the regular  expression pattern, return a corresponding match object.  Return None if the string does not match the pattern;  note that this is different from a zero-length match.  Note that even in MULTILINE mode, re.match() will only match  at the beginning of the string and not at the beginning of each line.  If you want to locate a match anywhere in string, use search()  instead (see also search() vs. match()).

Answer:re.match(pattern, string, flags=0)

Note:

###Question:If the whole string matches the regular expression pattern, return a  corresponding match object.  Return None if the  string does not match the pattern; note that this is different from a  zero-length match.    New in version 3.4.

Answer:re.fullmatch(pattern, string, flags=0)

Note:

###Question:Split string by the occurrences of pattern.  If capturing parentheses are  used in pattern, then the text of all groups in the pattern are also returned  as part of the resulting list. If maxsplit is nonzero, at most maxsplit  splits occur, and the remainder of the string is returned as the final element  of the list.  >>> re.split('\W+', 'Words, words, words.')  ['Words', 'words', 'words', '']  >>> re.split('(\W+)', 'Words, words, words.')  ['Words', ', ', 'words', ', ', 'words', '.', '']  >>> re.split('\W+', 'Words, words, words.', 1)  ['Words', 'words, words.']  >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)  ['0', '3', '9']      If there are capturing groups in the separator and it matches at the start of  the string, the result will start with an empty string.  The same holds for  the end of the string:  >>> re.split('(\W+)', '...words, words...')  ['', '...', 'words', ', ', 'words', '...', '']      That way, separator components are always found at the same relative  indices within the result list.    Note  split() doesn’t currently split a string on an empty pattern match.  For example:  >>> re.split('x*', 'axbc')  ['a', 'bc']      Even though 'x*' also matches 0 ‘x’ before ‘a’, between ‘b’ and ‘c’,  and after ‘c’, currently these matches are ignored.  The correct behavior  (i.e. splitting on empty matches too and returning ['', 'a', 'b', 'c',  '']) will be implemented in future versions of Python, but since this  is a backward incompatible change, a FutureWarning will be raised  in the meanwhile.  Patterns that can only match empty strings currently never split the  string.  Since this doesn’t match the expected behavior, a  ValueError will be raised starting from Python 3.5:  >>> re.split("^$", "foo\n\nbar\n", flags=re.M)  Traceback (most recent call last):    File "<stdin>", line 1, in <module>    ...  ValueError: split() requires a non-empty pattern match.          Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Splitting on a pattern that could match an empty string now raises  a warning.  Patterns that can only match empty strings are now rejected.

Answer:re.split(pattern, string, maxsplit=0, flags=0)

Note:

###Question:Return all non-overlapping matches of pattern in string, as a list of  strings.  The string is scanned left-to-right, and matches are returned in  the order found.  If one or more groups are present in the pattern, return a  list of groups; this will be a list of tuples if the pattern has more than  one group.  Empty matches are included in the result unless they touch the  beginning of another match.

Answer:re.findall(pattern, string, flags=0)

Note:

###Question:Return an iterator yielding match objects over  all non-overlapping matches for the RE pattern in string.  The string  is scanned left-to-right, and matches are returned in the order found.  Empty  matches are included in the result unless they touch the beginning of another  match.

Answer:re.finditer(pattern, string, flags=0)

Note:

###Question:Return the string obtained by replacing the leftmost non-overlapping occurrences  of pattern in string by the replacement repl.  If the pattern isn’t found,  string is returned unchanged.  repl can be a string or a function; if it is  a string, any backslash escapes in it are processed.  That is, \n is  converted to a single newline character, \r is converted to a carriage return, and  so forth.  Unknown escapes such as \& are left alone.  Backreferences, such  as \6, are replaced with the substring matched by group 6 in the pattern.  For example:  >>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',  ...        r'static PyObject*\npy_\1(void)\n{',  ...        'def myfunc():')  'static PyObject*\npy_myfunc(void)\n{'      If repl is a function, it is called for every non-overlapping occurrence of  pattern.  The function takes a single match object argument, and returns the  replacement string.  For example:  >>> def dashrepl(matchobj):  ...     if matchobj.group(0) == '-': return ' '  ...     else: return '-'  >>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')  'pro--gram files'  >>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)  'Baked Beans & Spam'      The pattern may be a string or an RE object.  The optional argument count is the maximum number of pattern occurrences to be  replaced; count must be a non-negative integer.  If omitted or zero, all  occurrences will be replaced. Empty matches for the pattern are replaced only  when not adjacent to a previous match, so sub('x*', '-', 'abc') returns  '-a-b-c-'.  In string-type repl arguments, in addition to the character escapes and  backreferences described above,  \g<name> will use the substring matched by the group named name, as  defined by the (?P<name>...) syntax. \g<number> uses the corresponding  group number; \g<2> is therefore equivalent to \2, but isn’t ambiguous  in a replacement such as \g<2>0.  \20 would be interpreted as a  reference to group 20, not a reference to group 2 followed by the literal  character '0'.  The backreference \g<0> substitutes in the entire  substring matched by the RE.    Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Unmatched groups are replaced with an empty string.      Deprecated since version 3.5, will be removed in version 3.6: Unknown escapes consist of '\' and ASCII letter now raise a  deprecation warning and will be forbidden in Python 3.6.

Answer:re.sub(pattern, repl, string, count=0, flags=0)

Note:

###Question:Perform the same operation as sub(), but return a tuple (new_string,  number_of_subs_made).    Changed in version 3.1: Added the optional flags argument.      Changed in version 3.5: Unmatched groups are replaced with an empty string.

Answer:re.subn(pattern, repl, string, count=0, flags=0)

Note:

###Question:Escape all the characters in pattern except ASCII letters, numbers and '_'.  This is useful if you want to match an arbitrary literal string that may  have regular expression metacharacters in it.    Changed in version 3.3: The '_' character is no longer escaped.

Answer:re.escape(string)

Note:

###Question:Clear the regular expression cache.

Answer:re.purge()

Note:

